"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCommonFact = exports.getProdFactors = exports.findCopyFactor = exports.getSimpleFact = exports.getPrimInt = void 0;

var _index = require("./index");

const getPrimInt = num => num % 2 !== 0 || num === 2 ? num : getPrimInt(num + 1);

exports.getPrimInt = getPrimInt;

const getSimpleFact = (num, facCount = 2, newArrFactors = []) => {
  if (num === 1) {
    return newArrFactors;
  }

  const primeInt = getPrimInt(facCount);

  if (num % primeInt === 0) {
    newArrFactors.push(primeInt);
    return getSimpleFact(num / primeInt, facCount, newArrFactors);
  }

  return getSimpleFact(num, facCount + 1, newArrFactors);
};

exports.getSimpleFact = getSimpleFact;

const findCopyFactor = (arr1Count, array2, arr2Count = 0) => {
  if (arr2Count > array2.length - 1) {
    return (0, _index.cons)(arr1Count, 'array2 over');
  }

  if (arr1Count === array2[arr2Count]) {
    return (0, _index.cons)(arr1Count, arr2Count);
  }

  return findCopyFactor(arr1Count, array2, arr2Count + 1);
};

exports.findCopyFactor = findCopyFactor;

const getProdFactors = (arrCommFactor, count = 0) => {
  if (count === arrCommFactor.length - 1) {
    return arrCommFactor[count];
  }

  return arrCommFactor[count] * getProdFactors(arrCommFactor, count + 1);
};

exports.getProdFactors = getProdFactors;

const getCommonFact = (arr1, arr2, arr3 = [], count1 = 0) => {
  const currConmmFac = arr3;
  const pairFactors = findCopyFactor(arr1[count1], arr2);

  if (count1 >= arr1.length - 1) {
    currConmmFac.push((0, _index.car)(pairFactors));
    return getProdFactors(arr3);
  }

  if ((0, _index.cdr)(pairFactors) === 'array2 over') {
    return getCommonFact(arr1, arr2, arr3, count1 + 1);
  }

  currConmmFac.push((0, _index.car)(pairFactors));
  arr2.splice((0, _index.cdr)(pairFactors), 1);
  return getCommonFact(arr1, arr2, arr3, count1 + 1);
};

exports.getCommonFact = getCommonFact;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91bmlxdWVDb2RlR2NkLmpzIl0sIm5hbWVzIjpbImdldFByaW1JbnQiLCJudW0iLCJnZXRTaW1wbGVGYWN0IiwiZmFjQ291bnQiLCJuZXdBcnJGYWN0b3JzIiwicHJpbWVJbnQiLCJwdXNoIiwiZmluZENvcHlGYWN0b3IiLCJhcnIxQ291bnQiLCJhcnJheTIiLCJhcnIyQ291bnQiLCJsZW5ndGgiLCJnZXRQcm9kRmFjdG9ycyIsImFyckNvbW1GYWN0b3IiLCJjb3VudCIsImdldENvbW1vbkZhY3QiLCJhcnIxIiwiYXJyMiIsImFycjMiLCJjb3VudDEiLCJjdXJyQ29ubW1GYWMiLCJwYWlyRmFjdG9ycyIsInNwbGljZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVPLE1BQU1BLFVBQVUsR0FBSUMsR0FBRCxJQUFVQSxHQUFHLEdBQUcsQ0FBTixLQUFZLENBQVosSUFBaUJBLEdBQUcsS0FBSyxDQUF6QixHQUE2QkEsR0FBN0IsR0FBbUNELFVBQVUsQ0FBQ0MsR0FBRyxHQUFHLENBQVAsQ0FBMUU7Ozs7QUFFQSxNQUFNQyxhQUFhLEdBQUcsQ0FBQ0QsR0FBRCxFQUFNRSxRQUFRLEdBQUcsQ0FBakIsRUFBb0JDLGFBQWEsR0FBRyxFQUFwQyxLQUEyQztBQUN0RSxNQUFJSCxHQUFHLEtBQUssQ0FBWixFQUFlO0FBQ2IsV0FBT0csYUFBUDtBQUNEOztBQUVELFFBQU1DLFFBQVEsR0FBR0wsVUFBVSxDQUFDRyxRQUFELENBQTNCOztBQUVBLE1BQUlGLEdBQUcsR0FBR0ksUUFBTixLQUFtQixDQUF2QixFQUEwQjtBQUN4QkQsSUFBQUEsYUFBYSxDQUFDRSxJQUFkLENBQW1CRCxRQUFuQjtBQUNBLFdBQU9ILGFBQWEsQ0FBQ0QsR0FBRyxHQUFHSSxRQUFQLEVBQWlCRixRQUFqQixFQUEyQkMsYUFBM0IsQ0FBcEI7QUFDRDs7QUFFRCxTQUFPRixhQUFhLENBQUNELEdBQUQsRUFBTUUsUUFBUSxHQUFHLENBQWpCLEVBQW9CQyxhQUFwQixDQUFwQjtBQUNELENBYk07Ozs7QUFlQSxNQUFNRyxjQUFjLEdBQUcsQ0FBQ0MsU0FBRCxFQUFZQyxNQUFaLEVBQW9CQyxTQUFTLEdBQUcsQ0FBaEMsS0FBc0M7QUFDbEUsTUFBSUEsU0FBUyxHQUFHRCxNQUFNLENBQUNFLE1BQVAsR0FBZ0IsQ0FBaEMsRUFBbUM7QUFDakMsV0FBTyxpQkFBS0gsU0FBTCxFQUFnQixhQUFoQixDQUFQO0FBQ0Q7O0FBRUQsTUFBSUEsU0FBUyxLQUFLQyxNQUFNLENBQUNDLFNBQUQsQ0FBeEIsRUFBcUM7QUFDbkMsV0FBTyxpQkFBS0YsU0FBTCxFQUFnQkUsU0FBaEIsQ0FBUDtBQUNEOztBQUVELFNBQU9ILGNBQWMsQ0FBQ0MsU0FBRCxFQUFZQyxNQUFaLEVBQW9CQyxTQUFTLEdBQUcsQ0FBaEMsQ0FBckI7QUFDRCxDQVZNOzs7O0FBWUEsTUFBTUUsY0FBYyxHQUFHLENBQUNDLGFBQUQsRUFBZ0JDLEtBQUssR0FBRyxDQUF4QixLQUE4QjtBQUMxRCxNQUFJQSxLQUFLLEtBQUtELGFBQWEsQ0FBQ0YsTUFBZCxHQUF1QixDQUFyQyxFQUF3QztBQUN0QyxXQUFPRSxhQUFhLENBQUNDLEtBQUQsQ0FBcEI7QUFDRDs7QUFDRCxTQUFPRCxhQUFhLENBQUNDLEtBQUQsQ0FBYixHQUF1QkYsY0FBYyxDQUFDQyxhQUFELEVBQWdCQyxLQUFLLEdBQUcsQ0FBeEIsQ0FBNUM7QUFDRCxDQUxNOzs7O0FBT0EsTUFBTUMsYUFBYSxHQUFHLENBQUNDLElBQUQsRUFBT0MsSUFBUCxFQUFhQyxJQUFJLEdBQUcsRUFBcEIsRUFBd0JDLE1BQU0sR0FBRyxDQUFqQyxLQUF1QztBQUNsRSxRQUFNQyxZQUFZLEdBQUdGLElBQXJCO0FBQ0EsUUFBTUcsV0FBVyxHQUFHZCxjQUFjLENBQUNTLElBQUksQ0FBQ0csTUFBRCxDQUFMLEVBQWVGLElBQWYsQ0FBbEM7O0FBRUEsTUFBSUUsTUFBTSxJQUFJSCxJQUFJLENBQUNMLE1BQUwsR0FBYyxDQUE1QixFQUErQjtBQUM3QlMsSUFBQUEsWUFBWSxDQUFDZCxJQUFiLENBQWtCLGdCQUFJZSxXQUFKLENBQWxCO0FBQ0EsV0FBT1QsY0FBYyxDQUFDTSxJQUFELENBQXJCO0FBQ0Q7O0FBRUQsTUFBSSxnQkFBSUcsV0FBSixNQUFxQixhQUF6QixFQUF3QztBQUN0QyxXQUFPTixhQUFhLENBQUNDLElBQUQsRUFBT0MsSUFBUCxFQUFhQyxJQUFiLEVBQW1CQyxNQUFNLEdBQUcsQ0FBNUIsQ0FBcEI7QUFDRDs7QUFFREMsRUFBQUEsWUFBWSxDQUFDZCxJQUFiLENBQWtCLGdCQUFJZSxXQUFKLENBQWxCO0FBQ0FKLEVBQUFBLElBQUksQ0FBQ0ssTUFBTCxDQUFZLGdCQUFJRCxXQUFKLENBQVosRUFBOEIsQ0FBOUI7QUFDQSxTQUFPTixhQUFhLENBQUNDLElBQUQsRUFBT0MsSUFBUCxFQUFhQyxJQUFiLEVBQW1CQyxNQUFNLEdBQUcsQ0FBNUIsQ0FBcEI7QUFDRCxDQWhCTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnMsIGNhciwgY2RyIH0gZnJvbSAnLi9pbmRleCc7XG5cbmV4cG9ydCBjb25zdCBnZXRQcmltSW50ID0gKG51bSkgPT4gKG51bSAlIDIgIT09IDAgfHwgbnVtID09PSAyID8gbnVtIDogZ2V0UHJpbUludChudW0gKyAxKSk7XG5cbmV4cG9ydCBjb25zdCBnZXRTaW1wbGVGYWN0ID0gKG51bSwgZmFjQ291bnQgPSAyLCBuZXdBcnJGYWN0b3JzID0gW10pID0+IHtcbiAgaWYgKG51bSA9PT0gMSkge1xuICAgIHJldHVybiBuZXdBcnJGYWN0b3JzO1xuICB9XG5cbiAgY29uc3QgcHJpbWVJbnQgPSBnZXRQcmltSW50KGZhY0NvdW50KTtcblxuICBpZiAobnVtICUgcHJpbWVJbnQgPT09IDApIHtcbiAgICBuZXdBcnJGYWN0b3JzLnB1c2gocHJpbWVJbnQpO1xuICAgIHJldHVybiBnZXRTaW1wbGVGYWN0KG51bSAvIHByaW1lSW50LCBmYWNDb3VudCwgbmV3QXJyRmFjdG9ycyk7XG4gIH1cblxuICByZXR1cm4gZ2V0U2ltcGxlRmFjdChudW0sIGZhY0NvdW50ICsgMSwgbmV3QXJyRmFjdG9ycyk7XG59O1xuXG5leHBvcnQgY29uc3QgZmluZENvcHlGYWN0b3IgPSAoYXJyMUNvdW50LCBhcnJheTIsIGFycjJDb3VudCA9IDApID0+IHtcbiAgaWYgKGFycjJDb3VudCA+IGFycmF5Mi5sZW5ndGggLSAxKSB7XG4gICAgcmV0dXJuIGNvbnMoYXJyMUNvdW50LCAnYXJyYXkyIG92ZXInKTtcbiAgfVxuXG4gIGlmIChhcnIxQ291bnQgPT09IGFycmF5MlthcnIyQ291bnRdKSB7XG4gICAgcmV0dXJuIGNvbnMoYXJyMUNvdW50LCBhcnIyQ291bnQpO1xuICB9XG5cbiAgcmV0dXJuIGZpbmRDb3B5RmFjdG9yKGFycjFDb3VudCwgYXJyYXkyLCBhcnIyQ291bnQgKyAxKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRQcm9kRmFjdG9ycyA9IChhcnJDb21tRmFjdG9yLCBjb3VudCA9IDApID0+IHtcbiAgaWYgKGNvdW50ID09PSBhcnJDb21tRmFjdG9yLmxlbmd0aCAtIDEpIHtcbiAgICByZXR1cm4gYXJyQ29tbUZhY3Rvcltjb3VudF07XG4gIH1cbiAgcmV0dXJuIGFyckNvbW1GYWN0b3JbY291bnRdICogZ2V0UHJvZEZhY3RvcnMoYXJyQ29tbUZhY3RvciwgY291bnQgKyAxKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDb21tb25GYWN0ID0gKGFycjEsIGFycjIsIGFycjMgPSBbXSwgY291bnQxID0gMCkgPT4ge1xuICBjb25zdCBjdXJyQ29ubW1GYWMgPSBhcnIzO1xuICBjb25zdCBwYWlyRmFjdG9ycyA9IGZpbmRDb3B5RmFjdG9yKGFycjFbY291bnQxXSwgYXJyMik7XG5cbiAgaWYgKGNvdW50MSA+PSBhcnIxLmxlbmd0aCAtIDEpIHtcbiAgICBjdXJyQ29ubW1GYWMucHVzaChjYXIocGFpckZhY3RvcnMpKTtcbiAgICByZXR1cm4gZ2V0UHJvZEZhY3RvcnMoYXJyMyk7XG4gIH1cblxuICBpZiAoY2RyKHBhaXJGYWN0b3JzKSA9PT0gJ2FycmF5MiBvdmVyJykge1xuICAgIHJldHVybiBnZXRDb21tb25GYWN0KGFycjEsIGFycjIsIGFycjMsIGNvdW50MSArIDEpO1xuICB9XG5cbiAgY3VyckNvbm1tRmFjLnB1c2goY2FyKHBhaXJGYWN0b3JzKSk7XG4gIGFycjIuc3BsaWNlKGNkcihwYWlyRmFjdG9ycyksIDEpO1xuICByZXR1cm4gZ2V0Q29tbW9uRmFjdChhcnIxLCBhcnIyLCBhcnIzLCBjb3VudDEgKyAxKTtcbn07XG4iXX0=